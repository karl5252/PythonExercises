KATAS:
先生、どうもありがとうございました!
------------------------------------------
Trolls are attacking your comment section!

A common way to deal with this situation is to remove all of the vowels from the trolls' comments, neutralizing the threat.

Your task is to write a function that takes a string and return a new string with all vowels removed.

For example, the string "This website is for losers LOL!" would become "Ths wbst s fr lsrs LL!".

Note: for this kata y isn't considered a vowel.
TESTS:
public class Tests {
    @Test
    public void FixedTests() {
        assertEquals("Ths wbst s fr lsrs LL!",Troll.disemvowel("This website is for losers LOL!")
                                      );
        assertEquals("N ffns bt,\nYr wrtng s mng th wrst 'v vr rd", Troll.disemvowel(
              "No offense but,\nYour writing is among the worst I've ever read"));
        assertEquals( "Wht r y,  cmmnst?", Troll.disemvowel("What are you, a communist?"));
    }
}
SOLUTION (JAVA):
public class Troll {
    public static String disemvowel(String str) {
      String retVal = "";
      String vowels = "AaEeIiOoUu";
     
      for (int i = 0; i < str.length(); i++){
        char c = str.charAt(i);
        if(vowels.indexOf(c)>=0){
          retVal = retVal + "";
        }else{
          retVal = retVal + c;
        }
      }
      return retVal;
                      
    }
}
SOLUTION (PYTHON) 1:
def disemvowel(string_):
    vowels =  ['A','a','E','e','I','i','O','o', 'U', 'u']
    for letter in vowels:
         string_ = string_.replace(letter, '')
    return string_
    
 SOLUTION (PYTHON) 2:
 def disemvowel(string_):
    string_ = string_.translate(None, "aAeEiIoOuU")
    return string_
------------------------------------------------------------------------------------------------------------------------------------------------------------------
by g964
In a small town the population is p0 = 1000 at the beginning of a year. The population regularly increases by 2 percent per year and moreover 50 new inhabitants per year come to live in the town. How many years does the town need to see its population greater or equal to p = 1200 inhabitants?

At the end of the first year there will be: 
1000 + 1000 * 0.02 + 50 => 1070 inhabitants

At the end of the 2nd year there will be: 
1070 + 1070 * 0.02 + 50 => 1141 inhabitants (** number of inhabitants is an integer **)

At the end of the 3rd year there will be:
1141 + 1141 * 0.02 + 50 => 1213

It will need 3 entire years.

More generally given parameters:

p0, percent, aug (inhabitants coming or leaving each year), p (population to surpass)

the function nb_year should return n number of entire years needed to get a population greater or equal to p.

aug is an integer, percent a positive or null floating number, p0 and p are positive integers (> 0)

Examples:
nb_year(1500, 5, 100, 5000) -> 15
nb_year(1500000, 2.5, 10000, 2000000) -> 10

Note:

Don't forget to convert the percent parameter as a percentage in the body of your function: if the parameter percent is 2 you have to convert it to 0.02.

SOLUTION TODO


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
by acr
Your team is writing a fancy new text editor and you've been tasked with implementing the line numbering.

Write a function which takes a list of strings and returns each line prepended by the correct number.

The numbering starts at 1. The format is n: string. Notice the colon and space in between.

TESTS:
import org.junit.Test;
import java.util.Arrays;
import static org.junit.Assert.assertEquals;

public class LineNumberingTest {
    @Test
    public void basicTests() {
        assertEquals(Arrays.asList(), LineNumbering.number(Arrays.asList()));
        assertEquals(Arrays.asList("1: a", "2: b", "3: c"), LineNumbering.number(Arrays.asList("a", "b", "c")));
        assertEquals(Arrays.asList("1: ", "2: ", "3: ", "4: ", "5: "), LineNumbering.number(Arrays.asList("", "", "", "", "")));
    }
}
SOLUTION 1:
SOLUTION 2:
-------------------------------------------------------------------------------------------------------------------------------------------------------------
